{
  "benchmark_results": [
    {
      "group_name": "arc_distance", 
      "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/arc_distance", 
      "records": [
        {
          "name": "arc_distance_pythran_nested_for_loops", 
          "cold_time": null, 
          "warm_time": 0.10512709617614746, 
          "all_warm_times": [
            0.1088409423828125, 
            0.10542988777160645, 
            0.10512709617614746, 
            0.10845804214477539, 
            0.1051638126373291
          ], 
          "std_warm_times": 0.0016778145045513435, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/arc_distance/arc_distance_pythran.py", 
          "rank": 1, 
          "speedup": 56.52994432285938
        }, 
        {
          "name": "arc_distance_parakeet_for_loops", 
          "cold_time": 0.5142989158630371, 
          "warm_time": 0.1073770523071289, 
          "all_warm_times": [
            0.1073770523071289, 
            0.11208391189575195, 
            0.10864591598510742, 
            0.10831618309020996, 
            0.11073493957519531
          ], 
          "std_warm_times": 0.001721399019216707, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/arc_distance/arc_distance_parakeet.py", 
          "rank": 2, 
          "speedup": 55.34542777970211
        }, 
        {
          "name": "arc_distance_theano_broadcast", 
          "cold_time": null, 
          "warm_time": 0.11894106864929199, 
          "all_warm_times": [
            0.13324403762817383, 
            0.1422109603881836, 
            0.12127113342285156, 
            0.11894106864929199, 
            0.11984086036682129
          ], 
          "std_warm_times": 0.0091578301339261762, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/arc_distance/arc_distance_theano.py", 
          "rank": 3, 
          "speedup": 49.96448208469055
        }, 
        {
          "name": "arc_distance_numpy_broadcast", 
          "cold_time": null, 
          "warm_time": 0.13268184661865234, 
          "all_warm_times": [
            0.14686107635498047, 
            0.1524348258972168, 
            0.15664410591125488, 
            0.14735102653503418, 
            0.13268184661865234
          ], 
          "std_warm_times": 0.0080933163463237142, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/arc_distance/arc_distance_python.py", 
          "rank": 4, 
          "speedup": 44.79006770792154
        }, 
        {
          "name": "arc_distance_theano_alloc", 
          "cold_time": null, 
          "warm_time": 0.14690685272216797, 
          "all_warm_times": [
            0.1573178768157959, 
            0.14690685272216797, 
            0.15223908424377441, 
            0.15753602981567383, 
            0.1526479721069336
          ], 
          "std_warm_times": 0.0039116729807307004, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/arc_distance/arc_distance_theano.py", 
          "rank": 5, 
          "speedup": 40.453040709412306
        }, 
        {
          "name": "arc_distance_numpy_tile", 
          "cold_time": null, 
          "warm_time": 0.1930398941040039, 
          "all_warm_times": [
            0.21186208724975586, 
            0.1930398941040039, 
            0.1973268985748291, 
            0.21577095985412598, 
            0.20704293251037598
          ], 
          "std_warm_times": 0.008592969725013529, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/arc_distance/arc_distance_python.py", 
          "rank": 6, 
          "speedup": 30.785496030471748
        }, 
        {
          "name": "arc_distance_numba_for_loops", 
          "cold_time": null, 
          "warm_time": 1.9586200714111328, 
          "all_warm_times": [
            1.9586200714111328
          ], 
          "std_warm_times": 0.0, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/arc_distance/arc_distance_numba.py", 
          "rank": 7, 
          "speedup": 3.0341917661345374
        }, 
        {
          "name": "arc_distance_python_nested_for_loops", 
          "cold_time": null, 
          "warm_time": 5.942828893661499, 
          "all_warm_times": [
            5.942828893661499
          ], 
          "std_warm_times": 0.0, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/arc_distance/arc_distance_python.py", 
          "rank": 8, 
          "speedup": 1.0
        }
      ], 
      "runtime_errors": [], 
      "import_errors": []
    }, 
    {
      "group_name": "growcut", 
      "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/growcut", 
      "records": [
        {
          "name": "growcut_cython", 
          "cold_time": null, 
          "warm_time": 0.006012916564941406, 
          "all_warm_times": [
            0.008693933486938477, 
            0.006012916564941406, 
            0.006022930145263672, 
            0.006597042083740234, 
            0.006233930587768555
          ], 
          "std_warm_times": 0.0010132483242115569, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/growcut/growcut_cython.pyx", 
          "rank": 1, 
          "speedup": 1881.414591593973
        }, 
        {
          "name": "growcut_parakeet", 
          "cold_time": 0.36848020553588867, 
          "warm_time": 0.0087890625, 
          "all_warm_times": [
            0.009679079055786133, 
            0.008841991424560547, 
            0.008814811706542969, 
            0.0087890625, 
            0.008779048919677734
          ], 
          "std_warm_times": 0.00034982290983843724, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/growcut/growcut_parakeet.py", 
          "rank": 2, 
          "speedup": 1287.1439887152778
        }, 
        {
          "name": "growcut_pythran", 
          "cold_time": null, 
          "warm_time": 0.009629011154174805, 
          "all_warm_times": [
            0.00990605354309082, 
            0.009748220443725586, 
            0.009629011154174805, 
            0.010061025619506836, 
            0.010226011276245117
          ], 
          "std_warm_times": 0.00021341611853591141, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/growcut/growcut_pythran.py", 
          "rank": 3, 
          "speedup": 1174.8650803476366
        }, 
        {
          "name": "growcut_numba", 
          "cold_time": 0.7452571392059326, 
          "warm_time": 0.04487490653991699, 
          "all_warm_times": [
            0.04487490653991699, 
            0.04530215263366699, 
            0.04511690139770508, 
            0.04619789123535156, 
            0.04583477973937988
          ], 
          "std_warm_times": 0.00048368756018663976, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/growcut/growcut_numba.py", 
          "rank": 4, 
          "speedup": 252.0961008187271
        }, 
        {
          "name": "growcut_python", 
          "cold_time": null, 
          "warm_time": 11.312788963317871, 
          "all_warm_times": [
            11.312788963317871
          ], 
          "std_warm_times": 0.0, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/growcut/growcut_python.py", 
          "rank": 5, 
          "speedup": 1.0
        }
      ], 
      "runtime_errors": [], 
      "import_errors": []
    }, 
    {
      "group_name": "julia", 
      "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/julia", 
      "records": [
        {
          "name": "julia_pythran_for_loops", 
          "cold_time": null, 
          "warm_time": 0.002413034439086914, 
          "all_warm_times": [
            0.004823207855224609, 
            0.002413034439086914, 
            0.0027740001678466797, 
            0.0027871131896972656, 
            0.0024590492248535156
          ], 
          "std_warm_times": 0.00089938770507012021, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/julia/julia_pythran.py", 
          "rank": 1, 
          "speedup": 1876.062345618022
        }, 
        {
          "name": "julia_pyopencl", 
          "cold_time": 0.20744800567626953, 
          "warm_time": 0.002936124801635742, 
          "all_warm_times": [
            0.0030829906463623047, 
            0.002936124801635742, 
            0.003047943115234375, 
            0.002941131591796875, 
            0.0031228065490722656
          ], 
          "std_warm_times": 7.5340482252766387e-05, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/julia/julia_pyopencl.py", 
          "rank": 2, 
          "speedup": 1541.829232643118
        }, 
        {
          "name": "julia_cython_for_loops", 
          "cold_time": null, 
          "warm_time": 0.0037598609924316406, 
          "all_warm_times": [
            0.006514072418212891, 
            0.0041370391845703125, 
            0.0038940906524658203, 
            0.0038399696350097656, 
            0.0037598609924316406
          ], 
          "std_warm_times": 0.0010501047470735292, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/julia/julia_cython.pyx", 
          "rank": 3, 
          "speedup": 1204.0346861128726
        }, 
        {
          "name": "julia_parakeet_for_loops", 
          "cold_time": 0.4095571041107178, 
          "warm_time": 0.0038728713989257812, 
          "all_warm_times": [
            0.004113912582397461, 
            0.0038759708404541016, 
            0.0038728713989257812, 
            0.0040209293365478516, 
            0.0037140846252441406
          ], 
          "std_warm_times": 0.00013736712737264799, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/julia/julia_parakeet.py", 
          "rank": 4, 
          "speedup": 1168.900948042354
        }, 
        {
          "name": "julia_python_numpy", 
          "cold_time": null, 
          "warm_time": 0.16756701469421387, 
          "all_warm_times": [
            0.17749810218811035, 
            0.16756701469421387, 
            0.1714169979095459, 
            0.1698451042175293, 
            0.16957497596740723
          ], 
          "std_warm_times": 0.0033878103258604742, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/julia/julia_python.py", 
          "rank": 5, 
          "speedup": 27.016075079642643
        }, 
        {
          "name": "julia_python_for_loops", 
          "cold_time": null, 
          "warm_time": 4.527003049850464, 
          "all_warm_times": [
            4.527003049850464
          ], 
          "std_warm_times": 0.0, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/julia/julia_python.py", 
          "rank": 6, 
          "speedup": 1.0
        }
      ], 
      "runtime_errors": [
        {
          "name": "julia_numba_for_loops", 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/julia/julia_numba.py", 
          "error_type": "NumbaError", 
          "error_message": "(see below)\n--------------------- Numba Encountered Errors or Warnings ---------------------\n    for i, x in enumerate(grid_x):\n--------^\nError 23:8: Only a single target iteration variable is supported at the moment\n--------------------------------------------------------------------------------", 
          "traceback": "Traceback (most recent call last):\n  File \"run_benchmarks.py\", line 184, in run_benchmarks\n    record = run_benchmark(name, func, args, kwargs, memory=memory)\n  File \"run_benchmarks.py\", line 130, in run_benchmark\n    first_timing = time_once()\n  File \"run_benchmarks.py\", line 126, in time_once\n    func(*args, **kwargs)\n  File \"numbawrapper.pyx\", line 189, in numba.numbawrapper._NumbaSpecializingWrapper.__call__ (numba/numbawrapper.c:3726)\n  File \"/usr/local/lib/python2.7/site-packages/numba/wrapping/compiler.py\", line 68, in compile_from_args\n    return self.compile(signature)\n  File \"/usr/local/lib/python2.7/site-packages/numba/wrapping/compiler.py\", line 83, in compile\n    compiled_function = dec(self.py_func)\n  File \"/usr/local/lib/python2.7/site-packages/numba/decorators.py\", line 222, in _jit_decorator\n    env, func, argtys, restype=return_type, nopython=nopython, **kwargs)\n  File \"/usr/local/lib/python2.7/site-packages/numba/decorators.py\", line 133, in compile_function\n    func_env = pipeline.compile2(env, func, restype, argtypes, **kwds)\n  File \"/usr/local/lib/python2.7/site-packages/numba/pipeline.py\", line 134, in compile2\n    post_ast = pipeline(func_ast, env)\n  File \"/usr/local/lib/python2.7/site-packages/numba/pipeline.py\", line 181, in __call__\n    ast = self.transform(ast, env)\n  File \"/usr/local/lib/python2.7/site-packages/numba/pipeline.py\", line 602, in transform\n    ast = stage(ast, env)\n  File \"/usr/local/lib/python2.7/site-packages/numba/pipeline.py\", line 587, in _stage\n    return _check_stage_object(stage_obj)(ast, env)\n  File \"/usr/local/lib/python2.7/site-packages/numba/pipeline.py\", line 192, in __call__\n    reporting.report(env, exc=e)\n  File \"/usr/local/lib/python2.7/site-packages/numba/reporting.py\", line 181, in report\n    raise exc\nNumbaError: (see below)\n--------------------- Numba Encountered Errors or Warnings ---------------------\n    for i, x in enumerate(grid_x):\n--------^\nError 23:8: Only a single target iteration variable is supported at the moment\n--------------------------------------------------------------------------------\n"
        }, 
        {
          "name": "julia_parakeet_numpy", 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/julia/julia_parakeet.py", 
          "error_type": "AssertionError", 
          "error_message": "Unsupported function: <built-in function geterrobj>", 
          "traceback": "Traceback (most recent call last):\n  File \"run_benchmarks.py\", line 184, in run_benchmarks\n    record = run_benchmark(name, func, args, kwargs, memory=memory)\n  File \"run_benchmarks.py\", line 130, in run_benchmark\n    first_timing = time_once()\n  File \"run_benchmarks.py\", line 126, in time_once\n    func(*args, **kwargs)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/decorators.py\", line 20, in __call__\n    return run_python_fn(self.f, args, kwargs, backend = backend_name)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/run_function.py\", line 144, in run_python_fn\n    untyped = ast_conversion.translate_function_value(fn)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 1064, in translate_function_value\n    filename = filename)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 977, in translate_function_source\n    filename = filename)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 921, in translate_function_ast\n    _, body = translator.visit_block(body)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 873, in visit_block\n    parakeet_stmt = self.visit(stmt)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 455, in visit\n    res = ast.NodeVisitor.visit(self, node)\n  File \"/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 241, in visit\n    return visitor(node)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 682, in visit_Assign\n    ssa_rhs = self.visit(stmt.value)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 455, in visit\n    res = ast.NodeVisitor.visit(self, node)\n  File \"/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 241, in visit\n    return visitor(node)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 561, in visit_Call\n    positional, keywords_dict, starargs_expr)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 507, in translate_value_call\n    fn = translate_function_value(value)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 1064, in translate_function_value\n    filename = filename)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 977, in translate_function_source\n    filename = filename)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 921, in translate_function_ast\n    _, body = translator.visit_block(body)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 873, in visit_block\n    parakeet_stmt = self.visit(stmt)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 455, in visit\n    res = ast.NodeVisitor.visit(self, node)\n  File \"/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 241, in visit\n    return visitor(node)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 682, in visit_Assign\n    ssa_rhs = self.visit(stmt.value)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 455, in visit\n    res = ast.NodeVisitor.visit(self, node)\n  File \"/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.py\", line 241, in visit\n    return visitor(node)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 561, in visit_Call\n    positional, keywords_dict, starargs_expr)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 507, in translate_value_call\n    fn = translate_function_value(value)\n  File \"/Users/ogrisel/code/parakeet/parakeet/frontend/ast_conversion.py\", line 1040, in translate_function_value\n    \"Unsupported function: %s\" % (fn,)\nAssertionError: Unsupported function: <built-in function geterrobj>\n"
        }
      ], 
      "import_errors": []
    }, 
    {
      "group_name": "pairwise", 
      "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise", 
      "records": [
        {
          "name": "pairwise_theano_blas_float32", 
          "cold_time": 0.005012035369873047, 
          "warm_time": 0.0008871555328369141, 
          "all_warm_times": [
            0.001127004623413086, 
            0.0008871555328369141, 
            0.0009310245513916016, 
            0.0009641647338867188, 
            0.0009980201721191406
          ], 
          "std_warm_times": 8.1478425327240775e-05, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_theano.py", 
          "rank": 1, 
          "speedup": 25005.932007524858
        }, 
        {
          "name": "pairwise_theano_blas_float64", 
          "cold_time": null, 
          "warm_time": 0.0013599395751953125, 
          "all_warm_times": [
            0.002713918685913086, 
            0.0018589496612548828, 
            0.0013899803161621094, 
            0.0013821125030517578, 
            0.0013599395751953125
          ], 
          "std_warm_times": 0.00052109595877885997, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_theano.py", 
          "rank": 2, 
          "speedup": 16312.600455820477
        }, 
        {
          "name": "pairwise_python_numpy_dot", 
          "cold_time": 0.005014181137084961, 
          "warm_time": 0.0015521049499511719, 
          "all_warm_times": [
            0.0016438961029052734, 
            0.0015521049499511719, 
            0.0015969276428222656, 
            0.0016779899597167969, 
            0.0016880035400390625
          ], 
          "std_warm_times": 5.1002053064094206e-05, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_python.py", 
          "rank": 3, 
          "speedup": 14292.945161290323
        }, 
        {
          "name": "pairwise_pyopencl_cpu", 
          "cold_time": 0.10082077980041504, 
          "warm_time": 0.002214193344116211, 
          "all_warm_times": [
            0.002214193344116211, 
            0.002218008041381836, 
            0.002488851547241211, 
            0.0026738643646240234, 
            0.002583026885986328
          ], 
          "std_warm_times": 0.00018852452813717901, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_pyopencl.py", 
          "rank": 4, 
          "speedup": 10019.06675998708
        }, 
        {
          "name": "pairwise_parakeet_inner_numpy", 
          "cold_time": 0.2653200626373291, 
          "warm_time": 0.013103008270263672, 
          "all_warm_times": [
            0.013900041580200195, 
            0.013103008270263672, 
            0.01338505744934082, 
            0.013541936874389648, 
            0.013995885848999023
          ], 
          "std_warm_times": 0.00032931009369884347, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_parakeet.py", 
          "rank": 5, 
          "speedup": 1693.057844171913
        }, 
        {
          "name": "pairwise_cython_for_loops", 
          "cold_time": null, 
          "warm_time": 0.013326883316040039, 
          "all_warm_times": [
            0.015118122100830078, 
            0.016410112380981445, 
            0.01414799690246582, 
            0.013326883316040039, 
            0.014674901962280273
          ], 
          "std_warm_times": 0.0010279843597360821, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_cython.pyx", 
          "rank": 6, 
          "speedup": 1664.61658049627
        }, 
        {
          "name": "pairwise_parakeet_nested_for_loops", 
          "cold_time": 0.2398979663848877, 
          "warm_time": 0.014143943786621094, 
          "all_warm_times": [
            0.01673412322998047, 
            0.014143943786621094, 
            0.015963077545166016, 
            0.014600992202758789, 
            0.01706385612487793
          ], 
          "std_warm_times": 0.0011513336678452737, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_parakeet.py", 
          "rank": 7, 
          "speedup": 1568.4558188928595
        }, 
        {
          "name": "pairwise_numba_nested_for_loops", 
          "cold_time": 0.43728184700012207, 
          "warm_time": 0.014182806015014648, 
          "all_warm_times": [
            0.016607999801635742, 
            0.018886089324951172, 
            0.014672994613647461, 
            0.014182806015014648, 
            0.016889095306396484
          ], 
          "std_warm_times": 0.0016879446846459112, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_numba.py", 
          "rank": 8, 
          "speedup": 1564.1581017701346
        }, 
        {
          "name": "pairwise_pythran_nested_for_loops", 
          "cold_time": null, 
          "warm_time": 0.015861034393310547, 
          "all_warm_times": [
            0.015861034393310547, 
            0.019369125366210938, 
            0.017110109329223633, 
            0.017008066177368164, 
            0.016272783279418945
          ], 
          "std_warm_times": 0.0012144030048395671, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_pythran.py", 
          "rank": 9, 
          "speedup": 1398.6572618224454
        }, 
        {
          "name": "pairwise_theano_broadcast_float32", 
          "cold_time": null, 
          "warm_time": 0.03631186485290527, 
          "all_warm_times": [
            0.05725908279418945, 
            0.03732419013977051, 
            0.03769803047180176, 
            0.03631186485290527, 
            0.03710293769836426
          ], 
          "std_warm_times": 0.0080726841538807902, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_theano.py", 
          "rank": 10, 
          "speedup": 610.9339474599975
        }, 
        {
          "name": "pairwise_theano_broadcast_float64", 
          "cold_time": null, 
          "warm_time": 0.052015066146850586, 
          "all_warm_times": [
            0.05339694023132324, 
            0.052015066146850586, 
            0.05818796157836914, 
            0.05913114547729492, 
            0.06252789497375488
          ], 
          "std_warm_times": 0.00385561524905771, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_theano.py", 
          "rank": 11, 
          "speedup": 426.4947173495533
        }, 
        {
          "name": "pairwise_python_broadcast_numpy", 
          "cold_time": null, 
          "warm_time": 0.10034799575805664, 
          "all_warm_times": [
            0.18344998359680176, 
            0.1101369857788086, 
            0.1103360652923584, 
            0.10187005996704102, 
            0.10034799575805664
          ], 
          "std_warm_times": 0.031381282638146844, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_python.py", 
          "rank": 12, 
          "speedup": 221.07218750742473
        }, 
        {
          "name": "pairwise_python_inner_numpy", 
          "cold_time": null, 
          "warm_time": 1.8539888858795166, 
          "all_warm_times": [
            1.8539888858795166
          ], 
          "std_warm_times": 0.0, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_python.py", 
          "rank": 13, 
          "speedup": 11.965633183229892
        }, 
        {
          "name": "pairwise_python_nested_for_loops", 
          "cold_time": null, 
          "warm_time": 22.18415093421936, 
          "all_warm_times": [
            22.18415093421936
          ], 
          "std_warm_times": 0.0, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/pairwise/pairwise_python.py", 
          "rank": 14, 
          "speedup": 1.0
        }
      ], 
      "runtime_errors": [], 
      "import_errors": []
    }, 
    {
      "group_name": "rosen_der", 
      "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/rosen_der", 
      "records": [
        {
          "name": "rosen_der_pythran", 
          "cold_time": null, 
          "warm_time": 0.0046977996826171875, 
          "all_warm_times": [
            0.004842996597290039, 
            0.0046977996826171875, 
            0.004755973815917969, 
            0.004799842834472656, 
            0.00768589973449707
          ], 
          "std_warm_times": 0.0011656906856845801, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/rosen_der/rosen_der_pythran.py", 
          "rank": 1, 
          "speedup": 2151.670066991474
        }, 
        {
          "name": "rosen_der_loops_parakeet", 
          "cold_time": 0.2757730484008789, 
          "warm_time": 0.0055789947509765625, 
          "all_warm_times": [
            0.006498098373413086, 
            0.0057220458984375, 
            0.0055789947509765625, 
            0.005592823028564453, 
            0.005597114562988281
          ], 
          "std_warm_times": 0.00035392723404176874, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/rosen_der/rosen_der_parakeet.py", 
          "rank": 2, 
          "speedup": 1811.8165384615384
        }, 
        {
          "name": "rosen_der_cython", 
          "cold_time": null, 
          "warm_time": 0.006287813186645508, 
          "all_warm_times": [
            0.01182699203491211, 
            0.006434917449951172, 
            0.006287813186645508, 
            0.0072479248046875, 
            0.010015010833740234
          ], 
          "std_warm_times": 0.0021906928053632506, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/rosen_der/rosen_der_cython.pyx", 
          "rank": 3, 
          "speedup": 1607.5724035945855
        }, 
        {
          "name": "rosen_der_theano_float32", 
          "cold_time": 0.014747858047485352, 
          "warm_time": 0.0070650577545166016, 
          "all_warm_times": [
            0.009510993957519531, 
            0.007377147674560547, 
            0.007175922393798828, 
            0.0070650577545166016, 
            0.0074880123138427734
          ], 
          "std_warm_times": 0.00090597311555152204, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/rosen_der/rosen_der_theano.py", 
          "rank": 4, 
          "speedup": 1430.7193669220126
        }, 
        {
          "name": "rosen_der_theano_float64", 
          "cold_time": null, 
          "warm_time": 0.0091400146484375, 
          "all_warm_times": [
            0.01277613639831543, 
            0.0091400146484375, 
            0.00925302505493164, 
            0.009331941604614258, 
            0.010946989059448242
          ], 
          "std_warm_times": 0.0014091250713029891, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/rosen_der/rosen_der_theano.py", 
          "rank": 5, 
          "speedup": 1105.918901293823
        }, 
        {
          "name": "rosen_der_numpy_parakeet", 
          "cold_time": 0.4040699005126953, 
          "warm_time": 0.011034965515136719, 
          "all_warm_times": [
            0.011754989624023438, 
            0.011034965515136719, 
            0.011857986450195312, 
            0.01317286491394043, 
            0.01301717758178711
          ], 
          "std_warm_times": 0.0008100997918172706, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/rosen_der/rosen_der_parakeet.py", 
          "rank": 6, 
          "speedup": 916.0078428830698
        }, 
        {
          "name": "rosen_der_numpy", 
          "cold_time": null, 
          "warm_time": 0.041760921478271484, 
          "all_warm_times": [
            0.05414891242980957, 
            0.042304039001464844, 
            0.04210686683654785, 
            0.04415702819824219, 
            0.041760921478271484
          ], 
          "std_warm_times": 0.0047008235389110822, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/rosen_der/rosen_der_python.py", 
          "rank": 7, 
          "speedup": 242.04722022402632
        }, 
        {
          "name": "rosen_der_python", 
          "cold_time": null, 
          "warm_time": 10.108114957809448, 
          "all_warm_times": [
            10.108114957809448
          ], 
          "std_warm_times": 0.0, 
          "source_url": "https://github.com/numfocus/python-benchmarks/tree/master/rosen_der/rosen_der_python.py", 
          "rank": 8, 
          "speedup": 1.0
        }
      ], 
      "runtime_errors": [], 
      "import_errors": []
    }
  ], 
  "benchmark_environment": {}
}